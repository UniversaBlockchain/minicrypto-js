var Universa = Universa || require('../index');
var chai = chai || require('chai');
var expect = chai.expect;

var Module = Module || require('../src/vendor/wasm/wrapper');

describe('Hash', function() {
  const {
    textToHex,
    textToBytes,
    hexToBytes,
    bytesToHex,
    encode64,
    decode64
  } = Universa;

  before((done) => {
    Universa.isReady.then(done);
  });

  const { SHA, HMAC } = Universa;

  const STANDARD = {
    sha256: {
      'one': '7692c3ad3540bb803c020b3aee66cd8887123234ea0c6e7143c0add73ff431ed',
      'onetwo': '25b6746d5172ed6352966a013d93ac846e1110d5a25e8f183b5931f4688842a1'
    },
    sha512: {
      'one': '05f70341078acf6a06d423d21720f9643d5f953626d88a02636dc3a9e79582aeb0c820857fd3f8dc502aa8360d2c8fa97a985fda5b629b809cad18ffb62d3899',
      'onetwo': '04aebe936d8eab8a145ce973d1101ac89ea8a2192ca43d3c986ba73ad3de1a58a6a5c95d85d86fc1900d24bad1334d56e550d1a23baf3f867f56fb64aaed0d59'
    },
    hmac: {
      'my secret data': 'cc54950346e46a542b596afdbf32cb984c2566ebf9cfc702ebce0e257a12af57',
      'a quick brown for his done something disgusting': 'la3Xl78Z3ktK2JLoDpPKthhqVilUX6+e6a0WultI9f8='
    }
  };

  describe('SHA', function() {
    describe('SHA256', function() {
      var hashFor = STANDARD.sha256;
      var sha256;

      beforeEach(function() { sha256 = new SHA('256'); });

      it('should calculate hash for message "one"', async () => {
        var msg = 'one';

        expect(await sha256.get(textToBytes(msg), 'hex')).to.equal(hashFor[msg]);
      });

      it('should calculate hash for message "onetwo" divided by parts', async () => {
        sha256.put(textToBytes('one'));
        sha256.put(textToBytes('two'));

        expect(await sha256.get('hex')).to.equal(hashFor['onetwo']);
      });
    });

    describe('SHA512', function() {
      var hashFor = STANDARD.sha512;
      var sha512;

      beforeEach(function() { sha512 = new SHA('512'); });

      it('should calculate hash for message "one"', async () => {
        var msg = 'one';

        expect(await sha512.get(textToBytes(msg), 'hex')).to.equal(hashFor[msg]);
      });

      it('should calculate hash for message "onetwo" divided by parts', async () => {
        sha512.put(textToBytes('one'));
        sha512.put(textToBytes('two'));

        expect(await sha512.get('hex')).to.equal(hashFor['onetwo']);
      });
    });

    describe('SHA 3 (384)', function() {
      it("should get hash with SHA384", async () => {
        const vector = "abc";
        const hash = new SHA("3_384");

        const digest = bytesToHex(await hash.get(vector));

        expect(digest).to.equal("ec01498288516fc926459f58e2c6ad8df9b473cb0fc08c2596da7cf0e49be4b298d88cea927ac7f539f1edf228376d25");
      });
    });
  });

  describe('HMAC', function() {
    var hashFor = STANDARD.hmac;

    it('should calculate hash for message and key', async () => {
      var data = textToBytes('a quick brown for his done something disgusting');
      var key = textToBytes('1234567890abcdef1234567890abcdef');
      var hmac = new HMAC('sha256', key);

      expect(encode64(await hmac.get(data))).to.equal('la3Xl78Z3ktK2JLoDpPKthhqVilUX6+e6a0WultI9f8=');
    });

    it('should calculate hash for larg data', async () => {
      var data = decode64("");
      var key = textToBytes('1234567890abcdef1234567890abcdef');
      var hmac = new HMAC('sha256', key);
      var arr = data;

      expect(encode64(await hmac.get(arr))).to.equal('6wTwsUjFpsm9ccQd3LOIpEpevalwhO8fbHOX9rffdEg=');
    });
  });
});
